initialize() {
    // The flag file used for communicating the desired population size
    defineConstant("FLAG_FILE", "flag.txt");
    initializeMutationRate(1e-07);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 999);
    initializeRecombinationRate(1e-08);
}
1 early() {
    // Create initial subpopulation with the provided pop_size.
    sim.addSubpop("p1", 10000);
    // Initialize a global variable for the mutation rate.
    mutRate = 1e-07;
}
900:1000 late() {
    if (community.tick % 10 == 0) {
        // Output the state in MS format every 10 ticks.
        g = p1.sampleIndividuals(25).genomes;
        g.outputMS("state.txt", append=T);
    }
}
1001:5000 early() {
    if (community.tick % 10 == 0) {
        // Decrease the mutation rate by multiplying it by the bottleneck factor.
        mutRate = mutRate * 0.99;
        sim.chromosome.setMutationRate(mutRate);
    }
}
1001:5000 late() {
    if (community.tick % 10 == 0) {
        // Output state and update population size.
        g = p1.sampleIndividuals(25).genomes;
        g.outputMS("state.txt", append=T);
        // Delete the flag file, then wait for a new one to be written.
        deleteFile(FLAG_FILE);
        while (fileExists(FLAG_FILE) == F) {
        }
        popSizeStr = readFile(FLAG_FILE);
        while (size(popSizeStr) == 0) {
            popSizeStr = readFile(FLAG_FILE);
        }
        popSize = asFloat(popSizeStr);
        p1.setSubpopulationSize(popSize);
    }
}
5001 late() {
    // End-of-run signal: wait for flag file and write a "generation_complete" message.
    while (fileExists(FLAG_FILE) == F) {
    }
    writeFile("generation_complete.txt", "1");
}